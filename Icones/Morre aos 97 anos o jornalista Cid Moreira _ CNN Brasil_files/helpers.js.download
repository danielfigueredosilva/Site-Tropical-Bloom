// Seleciona o elemento com o ID "todas" e o armazena na constante `filterAllCities`
const filterAllCities = document.getElementById("todas");

// Seleciona o elemento com o ID "capitais" e o armazena na constante `filterCapitals`
const filterCapitals = document.getElementById("capitais");

// Seleciona todos os elementos <label> que têm o atributo `for='ranking__trigger'` e os armazena na constante `labelRanking`
const labelRanking = document.querySelectorAll(`label[for='ranking__trigger']`);

// Seleciona todos os elementos <label> que têm o atributo `for='graphics__trigger'` e os armazena na constante `labelGraphics`
const labelGraphics = document.querySelectorAll(`label[for='graphics__trigger']`);

// Seleciona o primeiro elemento que possui a classe `election__content` e o armazena na constante `electionContent`
const electionContent = document.querySelector('.election__content');

// Seleciona o elemento com o ID "graphics__trigger" (provavelmente um input de tipo checkbox) e o armazena na constante `graphicsTrigger`
const graphicsTrigger = document.querySelector("#graphics__trigger");

// Seleciona o elemento com o ID "ranking__trigger" (provavelmente um input de tipo checkbox) e o armazena na constante `rankingTrigger`
const rankingTrigger = document.querySelector("#ranking__trigger");

/*
 * Itera sobre cada elemento em `labelRanking` e adiciona um listener de evento para o evento 'click'
 * Quando um elemento `labelRanking` é clicado, executa a função de callback fornecida
 */
labelRanking.forEach((trigger) => {
	trigger.addEventListener('click', () => {

		// Verifica se `electionContent` possui a classe CSS 'search__result__graphics'
		// Caso positivo, remove essa classe do primeiro elemento encontrado com essa classe
		if (electionContent.classList.contains('search__result__graphics')) {
			document.querySelector('.search__result__graphics')?.classList.remove('search__result__graphics');
		}

		// Desmarca o checkbox referenciado por `graphicsTrigger`
		graphicsTrigger.checked = false;

		// Define a opacidade do segundo elemento em `labelRanking` para 1 (totalmente opaco)
		labelRanking[1].style.opacity = '1';

		// Define a opacidade do segundo elemento em `labelGraphics` para 0.5 (semi-transparente)
		labelGraphics[1].style.opacity = '.5';

		// Adiciona a classe CSS 'ranking__results' ao elemento `electionContent`
		electionContent.classList.add('ranking__results');
	});
});

/*
 * Itera sobre cada elemento em `labelGraphics`, configura o estado inicial dos controles de gráficos
 * e adiciona um listener de evento para o evento 'click' para manipular a exibição dos gráficos
 */
labelGraphics.forEach((trigger) => {
	// Marca o checkbox associado a `graphicsTrigger`
	graphicsTrigger.checked = true;

	// Define a opacidade do segundo elemento em `labelGraphics` para 1 (totalmente opaco)
	labelGraphics[1].style.opacity = '1';

	// Adiciona um listener de evento 'click' a cada elemento em `labelGraphics`
	trigger.addEventListener('click', () => {
		// Desmarca o checkbox associado a `rankingTrigger`
		rankingTrigger.checked = false;

		// Define a opacidade do segundo elemento em `labelGraphics` para 1 (totalmente opaco)
		labelGraphics[1].style.opacity = '1';

		// Define a opacidade do segundo elemento em `labelRanking` para 0.5 (semi-transparente)
		labelRanking[1].style.opacity = '.5';

		// Remove a classe CSS 'ranking__results' do elemento `electionContent`
		electionContent.classList.remove('ranking__results');
	});
});

/*
 * Adiciona um listener de evento 'click' ao segundo elemento em `labelRanking`
 * Quando clicado, o primeiro elemento em `labelRanking` é rolado para a visualização suave
 */
labelRanking[1].addEventListener('click', () => {
	labelRanking[0].scrollIntoView({ behavior: 'smooth' });
});

/*
 * Adiciona um listener de evento 'click' ao segundo elemento em `labelGraphics`
 * Quando clicado, o primeiro elemento em `labelGraphics` é rolado para a visualização suave
 */
labelGraphics[1].addEventListener('click', () => {
	labelGraphics[0].scrollIntoView({ behavior: 'smooth' });
});
