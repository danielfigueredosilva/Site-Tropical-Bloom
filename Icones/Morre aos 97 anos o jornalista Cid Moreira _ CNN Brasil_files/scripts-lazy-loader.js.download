// phpcs:ignoreFile
// Esse JS é crítico, podemos ignorar no PHPCS

const eventTrigger = window.innerWidth < 768 ? 'touchstart' : 'click';
const enableLazyLoadJs = 1;
const jsIsExcluded = 1;
const enableInputEvents = 1;
const excludedJs = 0;

(function() {
	const originalAddEventListener = EventTarget.prototype.addEventListener;
	const registeredEvents = [], pendingEvents = [], clickedElements = [];

	function handleClickEvent(e) {
		if (e.target.tagName === "I") {
			clickedElements.push(e.target.parentNode);
		} else {
			clickedElements.push(e.target);
		}
	}

	EventTarget.prototype.addEventListener = function(eventType, listener, options) {
		const monitoredEvents = ["click", "touchstart", "keydown", "keyup", "input", "blur", "focus", "pointerup", "pointerdown"];
		if (monitoredEvents.includes(eventType)) {
			const htmlElement = document.querySelector("html");
			if (htmlElement.classList.contains("cnnlazy_start")) {
				registeredEvents[eventType] = registeredEvents[eventType] || [];
				registeredEvents[eventType].push(this);
			} else {
				pendingEvents[eventType] = pendingEvents[eventType] || [];
				pendingEvents[eventType].push(this);
			}
			if (enableInputEvents && window.location.href.includes("?tester=")) {
				console.log("cnnlazy - ", this, eventType, listener);
			}
			if (enableInputEvents && !listener.toString().includes("preventDefault") &&
				!listener.toString().includes("stopPropagation") &&
				!listener.toString().includes("event.dispatch.apply") &&
				(typeof options !== 'object' || (typeof options === 'object' && typeof options.passive !== 'boolean'))) {
				options = typeof options === 'object' ? options : {};
				options.passive = true;
			}
		}
		originalAddEventListener.call(this, eventType, listener, options);
	};

	document.querySelector("html").addEventListener("click", handleClickEvent, { passive: true });

	window.addEventListener("cnnlazy-load", function() {
		document.querySelector("html").removeEventListener("click", handleClickEvent);
		setTimeout(() => {
			const eventType = "click";
			clickedElements.forEach(target => {
				registeredEvents[eventType].forEach(element => {
					if (target === element) {
						let isInPending = 0;
						pendingEvents[eventType].forEach(el => {
							if (el === element) {
								isInPending = 1;
							}
						});
						if (!isInPending) {
							target.click();
						}
					}
				});
			});
		}, 100);
	});
})();

class LazyLoadScripts {
	constructor(events) {
		this.triggerEvents = events;
		this.eventOptions = { passive: true };
		this.userEventListener = this.triggerListener.bind(this);
		this.lazyTriggerInterval = null;
		this.styleLoadFired = false;
		this.lazyScriptsLoadFired = false;
		this.scriptsLoadFired = false;
		this.scriptsLoadFire = false;
		this.excludedJs = excludedJs;
		this.enableLazyLoadJs = enableLazyLoadJs;
		this.styles = [];
		this.scripts = { normal: [], async: [], defer: [], lazy: [] };
	}

	addUserEventListeners(instance) {
		this.triggerEvents.forEach(event => {
			window.addEventListener(event, instance.userEventListener, instance.eventOptions);
		});
	}

	removeUserEventListeners(instance) {
		this.triggerEvents.forEach(event => {
			window.removeEventListener(event, instance.userEventListener, instance.eventOptions);
		});
	}

	triggerListenerOnLoad() {
		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", this.loadResources.bind(this));
		} else {
			this.loadResources();
		}
	}

	triggerListener() {
		this.removeUserEventListeners(this);
		this.lazyScriptsLoadFired = true;
		this.addHtmlClass("cnnlazy_user");
		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", this.loadStyleResources.bind(this));
			if (!this.scriptsLoadFire) {
				document.addEventListener("DOMContentLoaded", this.loadResources.bind(this));
			}
		} else {
			this.loadStyleResources();
			if (!this.scriptsLoadFire) {
				this.loadResources();
			}
		}
	}

	async loadStyleResources() {
		if (!this.styleLoadFired) {
			this.styleLoadFired = true;
			this.registerStyles();
			const htmlElement = document.querySelector("html");
			htmlElement.setAttribute("data-css", this.styles.length);
			htmlElement.setAttribute("data-css-loaded", 0);
			this.preloadScripts(this.styles);
			this.loadPreloadedStyles();
		}
	}

	loadPreloadedStyles() {
		setTimeout(instance => {
			const htmlElement = document.querySelector("html");
			if (htmlElement.getAttribute("css-preloaded") === "1") {
				instance.loadStyles(instance.styles);
			} else {
				instance.loadPreloadedStyles();
			}
		}, 200, this);
	}

	async loadResources() {
		if (!this.scriptsLoadFired) {
			this.scriptsLoadFired = true;
			this.holdEventListeners();
			await this.executeDocumentWrite();
			this.registerScripts();
			this.addHtmlClass("cnnlazy_start");
			await this.preloadScripts(this.scripts.normal);
			await this.preloadScripts(this.scripts.defer);
			await this.preloadScripts(this.scripts.async);
			await this.loadScripts(this.scripts.normal);
			await this.loadScripts(this.scripts.defer);
			await this.loadScripts(this.scripts.async);
			await this.executeDomContentLoaded();
			await this.executeWindowLoad();
			window.dispatchEvent(new Event("cnnlazy-scripts-loaded"));
			this.addHtmlClass("cnnlazy_js");
			this.lazyTriggerInterval = setInterval(this.triggerLazyScripts, 500, this);
		}
	}

	async triggerLazyScripts(instance) {
		if (instance.lazyScriptsLoadFired) {
			await instance.loadScripts(instance.scripts.lazy);
			instance.addHtmlClass("jsload");
			clearInterval(instance.lazyTriggerInterval);
		}
	}

	addHtmlClass(className) {
		document.querySelector("html").classList.add(className);
	}

	registerScripts() {
		document.querySelectorAll("script[type=lazyload_int]").forEach(script => {
			if (script.hasAttribute("data-src")) {
				if (script.hasAttribute("async") && script.async !== false) {
					this.scripts.async.push(script);
				} else if (script.hasAttribute("defer") && script.defer !== false || script.getAttribute("data-cnnlazy-type") === "module") {
					this.scripts.defer.push(script);
				} else {
					this.scripts.normal.push(script);
				}
			} else {
				this.scripts.normal.push(script);
			}
		});

		document.querySelectorAll("script[type=lazyload_ext]").forEach(script => {
			this.scripts.lazy.push(script);
		});
	}

	registerStyles() {
		document.querySelectorAll("link[data-href]").forEach(link => {
			this.styles.push(link);
		});
	}

	async executeScript(script) {
		await this.repaintFrame();
		return new Promise(resolve => {
			const newScript = document.createElement("script");
			Array.from(script.attributes).forEach(attr => {
				if (attr.name !== "type" && attr.name !== "data-src") {
					if (attr.name === "data-cnnlazy-type") {
						newScript.setAttribute("type", attr.value);
					} else {
						newScript.setAttribute(attr.name, attr.value);
					}
				}
			});
			if (script.hasAttribute("data-src")) {
				newScript.setAttribute("src", script.getAttribute("data-src"));
				newScript.addEventListener("load", resolve);
				newScript.addEventListener("error", resolve);
			} else {
				newScript.text = script.text;
				resolve();
			}
			script.parentNode.replaceChild(newScript, script);
		});
	}

	async executeStyles(link) {
		link.href = link.getAttribute("data-href");
		link.rel = "stylesheet";
	}

	async loadScripts(scripts) {
		const script = scripts.shift();
		if (script) {
			await this.executeScript(script);
			return this.loadScripts(scripts);
		} else {
			return Promise.resolve();
		}
	}

	async loadStyles(styles) {
		const style = styles.shift();
		if (style) {
			await this.executeStyles(style);
			document.querySelector("html").setAttribute("data-css-loaded", parseInt(document.querySelector("html").getAttribute("data-css-loaded")) + 1);
			return this.loadStyles(styles);
		} else {
			return Promise.resolve();
		}
	}

	async repaintFrame() {
		return new Promise(resolve => {
			window.requestAnimationFrame(resolve);
		});
	}

	holdEventListeners() {
		if (this.enableLazyLoadJs || this.jsIsExcluded || this.excludedJs) {
			const clickHandler = e => {
				if (["A", "INPUT", "TEXTAREA", "BUTTON", "LABEL", "SELECT", "SVG", "IMG"].includes(e.target.tagName)) {
					this.lazyScriptsLoadFired = true;
				}
			};

			window.addEventListener(eventTrigger, clickHandler);
			window.addEventListener("scroll", () => this.lazyScriptsLoadFired = true);
			window.addEventListener("mousemove", () => this.lazyScriptsLoadFired = true);
			window.addEventListener("touchmove", () => this.lazyScriptsLoadFired = true);
			window.addEventListener("resize", () => this.lazyScriptsLoadFired = true);
		}
	}

	async executeDocumentWrite() {
		const oldDocumentWrite = document.write;
		document.write = function(content) {
			if (content.includes("cnnlazy-content")) {
				const htmlElement = document.createElement("div");
				htmlElement.innerHTML = content;
				while (htmlElement.firstChild) {
					document.body.appendChild(htmlElement.firstChild);
				}
			} else {
				oldDocumentWrite.apply(document, arguments);
			}
		};
	}

	async preloadScripts(scripts) {
		const headElement = document.querySelector("head");
		scripts.forEach(script => {
			const scriptSrc = script.getAttribute("data-src");
			if (
				typeof scriptSrc !== "undefined"
				&& typeof scriptSrc !== null
				&& typeof scriptSrc !== "object"
			) {
				const link = document.createElement("link");
				link.rel = "preload";
				link.as = "script";
				link.href = scriptSrc;
				headElement.appendChild(link);
			}
		});
	}

	async executeDomContentLoaded() {
		if (typeof window.ondomcontentloaded === "function") {
			window.ondomcontentloaded();
		}
	}

	async executeWindowLoad() {
		if (typeof window.onload === "function") {
			window.onload();
		}
	}
}

const lazyLoadScripts = new LazyLoadScripts(["click", "touchstart", "mousemove", "scroll", "resize"]);
lazyLoadScripts.addUserEventListeners(lazyLoadScripts);

const lazyLoadChecker = setInterval(function(e) {
	if (
		document.body !== null
		&& document.body.getBoundingClientRect().top < -30
	) {
		clearInterval(lazyLoadChecker);
		lazyLoadScripts.triggerListenerOnLoad();
	}
}, 500, lazyLoadScripts);
