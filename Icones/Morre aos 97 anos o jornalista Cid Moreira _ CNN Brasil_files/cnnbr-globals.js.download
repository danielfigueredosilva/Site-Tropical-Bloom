let scriptTag = '';

const CnnUtils = {
	/**
	 * Verifica se o device é mobile pelo viewport
	 * Caso o viewport seja menor que 992px, é true
	 */
	isMobileDevice() {
		return window.innerWidth < 992;
	},

	/**
	 * Cria um observer para carregar e executar um script quando um elemento específico estiver
	 * visível no viewport
	 *
	 * @param selector Seletor do elemento que será observado. Exemplo: '.audiome__element'
	 * @param scriptUrl URL arquivo JS que será carregado na página
	 * @param callback Função que será executada após o carregamento do JS definido em scriptUrl
	 */
	observeElementAndLoadScript(selector, scriptUrl = "", callback = () => {}) {
		setTimeout(() => {
			const observer = new IntersectionObserver((entries, observer) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						if (scriptUrl === "") {
							callback(entry);
							observer.unobserve(entry.target);
							return;
						}

						this.loadScriptTag(scriptUrl, callback());

						observer.unobserve(entry.target);
					}
				});
			});

			const elements = document.querySelectorAll(selector);

			elements.forEach(element => {
				observer.observe(element);
			});
		}, 0);
	},

	loadScriptTag(scriptUrl, callback = () => {}) {
		let tag = document.createElement('script');
		tag.src = scriptUrl;

		// O script precisa ser executado quando criado, por isso usamos insertBefore
		// @codingStandardsIgnoreStart
		let firstScriptTag = document.getElementsByTagName('script')[0];
		firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
		// @codingStandardsIgnoreEnd

		// Roda a função depois do script ser carregado
		tag.onload = () => {
			callback();
		};
	},

	/*
 		* Função que bate na url da API e retorna dados.
 	*/
	async getFetchApi(url) {

		const response = await fetch(url, {
			method: "GET",
			headers: {
				'Accept': 'application/json',
			},
		});

		return await response.json();
	}

}
