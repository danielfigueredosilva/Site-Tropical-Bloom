let   rankingChart;
const ctx = document.getElementById("rankingChart").getContext("2d");

filterAllCities.addEventListener("change", loadRanking);
filterCapitals.addEventListener("change", updateRankingByCapital);

labelGraphics.forEach((click) => {
	click.addEventListener("click", removeChart);
});

labelRanking.forEach((click) => {
	click.addEventListener("click", loadRanking);
});

function removeChart() {
	rankingChart.destroy();
}


/**
 * Função que formata gráfico do ranking
 *
 * @param obj Dados para montar gráfico.
 *
 * return void
 */
function formatChart(obj) {
	const {
		cities,
		partyNumber,
		color,
		partyName
	} = obj;

	Chart.unregister(ChartDataLabels);

	chartConfig.data.labels = partyName;
	chartConfig.data.datasets.label   = partyNumber;
	chartConfig.data.datasets[0].data = cities;
	chartConfig.data.datasets[0].backgroundColor = color;
	chartConfig.options.plugins.tooltip.callbacks.label = function(context) {
		const partidoIndex = context.dataIndex;
		return 'Cidades: ' + cities[partidoIndex];
	};

	if (rankingChart?.ctx === null || rankingChart?.ctx === undefined) {
		rankingChart = new Chart(ctx, chartConfig);
		return;
	}

	if (rankingChart instanceof Chart) {
		rankingChart.update();
	}
}

/**
 * Função que atualiza o ranking por capitais
 *
 * return void
 */
function updateRankingByCapital() {
	const dataRankingParse = JSON.parse(localStorage.getItem('data_ranking'));

	if (dataRankingParse) {
		formatChart(dataRankingParse);
	}
}

/**
 * Função que carrega ranking
 *
 * return void
 */
async function loadRanking() {

	filterAllCities.checked = true;

	const url= `${window.location.origin}/wp-json/cnnbr/politics/v1/ranking/`;
	const rankingParty =  await CnnUtils.getFetchApi(url);

	const partyVotesCities = rankingParty.reduce((acc, item) => {
		acc[item.party] = (acc[item.party] || 0) + 1;
		return acc;
	}, {});

	partyVotesCities[20] += partyVotesCities[19];
        delete partyVotesCities[19];
	
	let partyVotesByCitiesArr = {};
	partyVotesByCitiesArr   = Object.entries(partyVotesCities);
	partyVotesByCitiesArr   = partyVotesByCitiesArr.sort((a, b) => b[1] - a[1]);

	const partyByCities=  {
		cities: partyVotesByCitiesArr.map(map => map[1]),
		partyNumber: partyVotesByCitiesArr.map(map => map[0]),
		color: partyVotesByCitiesArr.map(map => getColorByParty(map[0])?.cor || "gray"),
		partyName:partyVotesByCitiesArr.map(map => getColorByParty(map[0])?.nome || "gray")
	};

	let partyVotesByCapitalsArr = rankingParty.filter((map) => {
		return capitalsBrazil.includes(map.city)
	}).reduce((acc, item) => {
		acc[item.party] = (acc[item.party] || 0) + 1;
		return acc;
	}, {});

	partyVotesByCapitalsArr = Object.entries(partyVotesByCapitalsArr);
	partyVotesByCapitalsArr = partyVotesByCapitalsArr.sort((a, b) => b[1] - a[1]);

	const partByCapitals = {
		cities: partyVotesByCapitalsArr.map(map => map[1]),
		partyNumber: partyVotesByCapitalsArr.map(map => map[0]),
		color: partyVotesByCapitalsArr.map(map => getColorByParty(map[0])?.cor || "gray"),
		partyName:partyVotesByCapitalsArr.map(map => getColorByParty(map[0])?.nome || "gray")
	};

	localStorage.setItem('data_ranking', JSON.stringify(partByCapitals));
	formatChart(partyByCities);
}
